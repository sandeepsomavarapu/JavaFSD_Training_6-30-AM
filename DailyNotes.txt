JAVA:
=======


language:
=========
communication with humans 



Programming Languages:
=======================
communication with machines 

	c,c++,java,python,.net

	2 types
	
	POP 							OOP			OMG
c,b,bcpl,cobol,photon...			c++,java,.net,python......
pointers
	OOPS features
				1)Performance	INHERITANCE,POLYMORPHISAM	
				2)Security		ABSTRACTION,ENCAPSULATION


		OOPS 			OOPL
	METHODOLOGY 		THE LANGUAGE WHICH SUPPORT ALL THE FEATURES OF OOPS 

					JAVA IS ONE OF THE OOPL
WHY JAVA?			1995 JDK BETA  JDK1.0...java8...JAVA 19

		1)PLATFORM INDEPENDENT     WORA(write once run anywhere)
		2)GARBAGE COLLECTION   GARBAGE COLLECTOR   C/C++


														.NET PLATFORM DEPENDENT
		MACHINE1 			MACHINE 2				MACHINE1 			MACHINE2
												
		WINDOWS				LINUX					WINDOWS 7			LINUX
		32/64					32
		I3 						I7
		
		JAVA 					JAVA	



10GB  3 GB


		JAVA 	james gosling-->53 KEYWORDS 1995 19 sun micro system -->oracle 
		
		lower case 
HELLO WORLD 

complete java installation

		https://www.javatpoint.com/javafx-how-to-install-java


1)what is compailation?

	the process of converting source code to byte code ,compailation (javac filename.java)
	
2)What is execution?	.class  java Welcome   JVM
	
	line by line executed JVM	



		JDK-->JRE-->JVM


Write a program to print add,sub,mul,div of 100,200

Identifier:
===========
any name in java will call it as identifier

	variable name,classname,method,interface,constant......


		class Test#124
		{
		
		int age@mine=123;
		
		
		
		}
		
		
		a-z,
		A-Z,
		0-9,
		_,$
		
		
Variables:
==========
		sandeeep 8989898989

		variable name 	value


		int x=90;

syntax:
========

		datatype variablename = value

Datatype:
========
	name,age,dob,weight,salary,email,contactno,aadhar no,pan......

53 

8 dt keywords

byte 	1 byte  -8 bits		-128 to 127													
short	2 bytes				-32768 to 32767					short salary=40000;
int 	4 bytes				-2147483648 to 2147483647
long	8 bytes				-2 power 63 to 2 power 63 -1				949432223232			long age=29;   --->100

float	4 bytes			float marks=87.5423423423423423423f;    5to 6 decimal 
double	8 bytes													14 to 15 decimal 	

boolean 1 bit --->true(1),false(0)
char	2 bytes						char gender='M';	

C ASCII VALUES
 UNICODE 18 international 

		24.56 LPA   76.5


Variables
	local (inside a method)   			global(inside the class and outside method)
									instance     static 


4 points 

1)syntax
		static variables declared by using static 
		if there is know static keyword then i.e instance 
2)memory
		class,object(instantiation) 
	instance variables will get memory space for every create object 
	static variables will get memory space ONLY ONCE at the time of class loading into JVM 
	
3)Access
		static properties can be accessed by using CLASSNAME
		instance properties can be accessed by using OBJNAME

4)When to use 
		for COMMON DATA like countryname,schoolname,orgname... fo for static
		for UNIQUE DATA like id,aadhar,pancard,mobile....instance 
		

Eclipse :	apache	IDE
=========
INTELLJI IDEA,NETBEANS,VS CODE,MY ECLIPSE

https://www.eclipse.org/downloads/packages/release/2020-12/r

Eclipse IDE for Enterprise Java Developers

								JAVA
			JSE 					JEE 												JME	
COREJAVA,AWT,SWINGS,APPLETS..	SERVLETS,JSP,MVC,JSF,EJB,WEBSERVICES,SPING WEB....		 ANDROID
Applications


1)standalone/dekstop applications   eclipse,media player,anti virus,java

2)web applications				gmail,fb,insta,amazon,flipkart.....

3)distributed applications			BANKING APPLICATIONS   ATM-->Bank

4)mobile applications



//ctrl+space--for suggestions
//ctrl+shift+f-->formatting
//ctrl+shift+/-->for adding multiline comments 
//ctrl+shift+\-->for removing multiline comments 
//ctrl+/-->for adding and removing single line comments 
//ctrl+shift+o-->for adding required imports and removing use less imports

Methods:
=======
method is block of statements for reusability


syntax:
=========

accessmodifier returntype methodname(params)  //method signature
{
return
//method body
}

Package :
==========
BY DEFAULT PACKAGE FOR EVERY JAVA FILE  java.lang
FOLDER-->PACKAGE 

PACKAGE-->COLLECTION OF CLASSES

JAR-->COLLECTION OF PACKAGES

ZIP FILES


package   

class/interface-->everyword first letter should capital
method/variable->starts with lowercase rest of the words first letter capital
package-->lowercase


Flow Control:
===============

command line args


Scanner -->java.util

local varibles when    where			stack  

instance	when howmuch		 where   heap/object area

static 		when how much    where     method/class area



JVM  3 parts		java Welcome

	CLSS --->loading
	
	Memory areas
	
	execution engine
	
	
OOPS Features:
=================

	1)inheritance
	2)polymorphisam				-performance
	3)encapsulation
	4)abstraction				-security


inheritance:
=============extends ,implements 
process of aquiring the properties from one class to another class

CODE Resuability

class Hello    //super/parent
{
100 methods
20 variables

/...

}


class Hi extends Hello{  //sub/child

20 methods
10 variables


}

//where ever main method is there that class must be public and the same class name should be the file name


//by default package for every java file  java.lang

//by default parent for every java class is java.lang.Object -11

instance / static methods 

concrete/non-abstract method:method with body/implementation

abstract method :method without body/implementation



Abstraction:hiding the internals by showcasing functionalities 
			Security

	class			: collection of only concrete methods

	abstract class  : collection of concrete and abstract methods  0-100%
		
	interface       : collection of only abstract methods		100%



Multiple Inheritance:
========================

MI not supported by java @class level
MI  supported by java @interface level


class Parent 				class Parent1
{							{
	m1(){						m1(){
	
	a+b							a*b
	}							}


}							}



class Child extends Parent,Parent1
{


Child child=new Child();
child.m1();//jvm

}





interface Parent 			interface Parent1
{							{
	void m1();					void m1();
						


}							}



class Child implements Parent,Parent1
{


Child child=new Child();
child.m1();//jvm

}
m1()
{


}

POLYMORPHISAM:
==============
many forms 


method overloading/compile time polymorphisam/static binding
		method name is same signature is different 
								no of params
								order of params
								type of params
		
		
		
		sleep(2000)
		sleep(2,30,2000)
		
		
method overriding /runtime polymorphisam/dynamic binding
method name is same implementation is different

class Parents
{
 public void properties()
 {
 sop("100 crores")
 }
public void marriage()
 {
 sop("xyz")
 }
}


class Abhishek extends Parents
{

public void marriage()
 {
 sop("abc")
 }


}
this,super,final,constructor,public,private,protected,default,Encapsulation


final:
=======
		before the variable  :we cant change the final variable value through out the program
		before the method	 :we cant override final method
		before the class	 :we cant inherit the final classes


constructor:
============
			syntax:
			========
			
			classname objname=new classname();
			
			
			classname objname=new constructor();
			
	constructor is a special member function which is used intialize object and provide values for instane variables
			
			
this:-
 it used to represent current class properties(variables,methods,constructors,object)	
super :-
 
 it used to represent parent class properties(variables,methods,constructors)			
			
AccessModifiers:
================
	public,private,protected,default


DEFAULT:PACKAGE LEVEL SCOPE
PRIVATE:CLASS LEVEL SCOPE
PUBLIC :ANY WHERE 
PROTECTED:INSIDE THE PACKAGE ANYWHERE OUTSIDE THE PACKAGE WHICH ARE CHILD



Encapsulation:
==================

wrapping up of data and behaviours together as a single unit .

class Employee
{
private int eid;
private String	ename;
private float	esal;
private String 	eadd;
private String	edesg;

//setters and getters

}
Day:15
========

String,StringBuffer,StringBuilder -->java.lang

if we want to represent group characters 


		"ktg"

String:imuttable(final/fixed)

SCP-->String objects

	duplicates are not allowed 




StringBuffer 		StringBuilder:muttable
is synchronized 		not synchronized
thread safety			no threadsafety
			
			public void m1()
			{									t1 ,t2 ,t3
			
			
			}
			
			public synchronized void m2()
			{
			
			
			}
			
			https://www.w3schools.com/java/java_ref_string.asp
			
Exception Handling:
====================

without exception handling:
============================
	1)system defined error messages

	2)abnormal termination


with exception handling Advantages:
============================
	1)User friendly error messages

	2)normal termination

https://www.javamadesoeasy.com/2015/05/exception-handling-exception-hierarchy.html#at_pco=smlwn-1.0&at_si=63fed53ca3432ce4&at_ab=per-2&at_pos=0&at_tot=1


1 example
			
			try-->error code
			catch-->handling code 
			
			finally-->cleanup code
			
			throw -->used to throw an exception
				throw new Exception();
			throws-->to indicate/alert/notification caller
			
		void m1() throws Exception
		{
		
		
		}
			
			
		user defined exceptions	
			
			
			EmployeeIdNotFound   extends Exception/Throwable/Runtime
			InvalidCredentials
			ProductNotFound
			
			
Q) while overriding can we change access modifier ? YES conditions apply**(scope should increasing way)Cannot reduce the visibility of the inherited method 
Q) while overriding can we change return type ?  YES Conditions apply**
Q) while overriding can we change throws ?  YES conditions apply**

https://www.geeksforgeeks.org/overriding-in-java/

https://www.tutorialspoint.com/Rules-for-Java-method-overriding



File IO
===========		databases
java <--->File


java.io package


File

FileWriter
BufferedWriter
PrintWriter


FileReader
BufferedReader


Employee<-->File

serialization,deserialization
transient


Collections:
============
variable

int eid=123;
	eid=124;

Arrays:used to store group values/objects

literal
int eids[]={123,124,125,126,127};

new keyword

int eids1[]=new int[10];
							eid[10]=2322;//AIOE
		index 0,1,2,3,4,5,6...9

Limitations of arrays:
=======================

1)arrays are fixed in size

2)arrays can hold/store only homogeneous data

3)no utility methods


Advantages of Collections:
=======================

1)Collections are not fixed in size   AL-->10  11th value   16   (cc*3/2)+1

2)Collections can hold/store both homogeneous and  haterogeneous data

3)lots utility methods

List 

1)duplicates are allowed
2)insertion order is preserved

java.util.*



Layered Architecture:
=====================

		code -->.java		12+13	=25							12,13,+

Database I C					businesslogic						UI code				USER
	
DAO	layer			<--->   service layer			<--->    	UI layer			input/output

								java			    			java

		call and return style


ProductManagement:
==================


1)Add Product
2)Update Product
3)Delete Product
4)Get Product
5)GetAll Products
6)GetAll Products Betbeen Prices
7)getAll Products By Category
8)getAll products by productname



BankApplication:
===============

1)Add Account
2)Update Account
3)Delete Account
4)Get Account Details
5)Withdraw
6)deposit
7)fund transfer

MultiThreading :
================

multi tasking:
=============

executing several tasks simultaneously


Process based multi tasking   LAPTOP

		executing several tasks simultaneously where each task is seperate independent process

Thread based multi tasking :multi threading 

	executing several tasks simultaneously where each and every task related to same process

Process :group/collection of threads

thread is smallest unit process


class App
{


segment-1  thread1
db/file/collection





segment-2  thread2






segment-3  thread3


.
.
.
.
.
.
}

thread creation in  java 


1)implements Runnable interface 
2)extends Thread class

Functional Interfaces-->1 abstract 
marker interface --->0 methods
class Test implements Runnable
{

run()
{



}

P S  V main(){
Test t=new Test();

Thread t=new Thread(t);
		t.start();//run()

}


}

Thread Class:
===============

class Test extends Thread
{

run()
{



}

P S  V main(){
Test t=new Test();
		t.start();//run()

}


}

