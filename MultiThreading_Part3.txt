Defining a thread by implementing Runnable interface
****************************************************

We can define a thread by implementing Runnable interface.

1st approach--- MyThread extends Thread implements RUnnable.
2nd approach -- MyThread implements Runnable.

--Runnable Interface present in java.lang package and it contains only one method.

ex:

public void run();

class MyRunnable implements Runnable{
public void run(){
for(int i=0;i<10;i++){
sop("Thread");//--- executed by child thread
}
}
}
class ThreadDemo{
public static void main(String args[]){
MyRunnable r = new MyRunnable();
Thread t = new Thread(r);
t.start();it will start a thread by calling a run method of your class
}

}

}

we will get mixed output and we cant show exact output.


case study:
***********

MyRunnable r = new MyRunnable();

Thread t1 = new Thread();

THread t2 = new Thread(r);


case1: t1.start()
------ ---------

A new thread will be created which is responsible for the execution of Thread class run(),
which as empty implementaion.


case2: t1.run();
------ --------

No New thread will be created and THread class will be executed just like a normal method call


case3: t2.start();
------ ------------

A new Thread will be created which is responsible for the execution of myRunnable class run();

case4: t2.run();
------ ---------

A new Thread wont be created and MyRunnable run() will be executed just like a normal method call.


case5: r.start();
------ ----------

We will get compile time error saying

MyRunnable class doesnt have start capability

CE : cannot find symbol
--
	symbol:method start()
        location : class MyRunnable


case6: r.run();
------ --------

No new thread will be created and MyRunnable run() will be executed like a normal method call.

which approach is best to define a thread()?
---

Among two ways of defining a thread implements runnable approach is recommended

In the first approach our class always extends Thread class, there is no chance of extending any other class hence we are missing inheritance benefit,

but in the second approach while implementing Runnable interface we can extend any other class

we wont miss any inheritance benefit,

because of above reason implementing Runnable interface approach is recommended then extending Thread class


Thread class constructors:
--------------------------

1) Thread t = new Thread();

2) Thread t = new Thread(Runnable r);

3) Thread t = new Thread(String name);

4) Thread t = new Thread(Runnable r,String name);

5) Thread t = new Thread(ThreadGroup g,String name);

6) Thread t = new Thread(ThreadGroup g,Runnable r);

7) Thread t = new Thread(ThreadGroup g,Runnable r,String name);

8) Thread t = new Thread(ThreadGroup g,Runnable r,String name,long stacksize);




Getting and Setting Name of a thread.
-------------------------------------

Every Thread in java, has some name it may be default name generated by jvm or customized name provided by programmer.

We can get and set name of a thread by using the following two methods of thread class:

public final String getName();
public final void setName(String name);


class MyThread extends Thread{


}
class Test{

public static void main(String args){

System.out.println(Thread.currentThread().getName());

MyThread t = new MyThread();

System.out.println(t.getName());

Thread.currentThread().setName("akash");

System.out.println(Thread.currentThread().getName());

System.out.println(10/0);



}

}


Note:
-----

we can get current executing thread object by using Thread.currentThread().getName()



class MyThread extends Thread{


public void run(){

System.out.println("run method execute by Thread :"+Thread.currentThread().getName());

}


}
class Test{

public static void main(String args){


MyThread t = new MyThread();

t.start();

System.out.println("main method execute by Thread :"+Thread.currentThread().getName());



}

}


