Thread Priorities:
------------------

Every THread in java has some priority it may be default priority generated by jvm or customized priority provided by the customer,

The Valid Range of thread Priorities 1 to 10, where 1 is min priority and 10 is max priority.

Thread class defines the following constants to represent some standard priorities.

Thread.MIN_PRIORITY=1;

Thread.NORM_PRIORITY=5;

Thread.MAX_PRIORITY=10;

---------------------------
0

1

10

Thread.LOW_PRIORITY

Thread.HIGH_PRIORITY

Thread.MIN_PRIORITY

Thread.NORM_PRIORITY

-----------------------------

..Thread shecdhuler will use priorities while allocating processsor,

..the thread which is having highest priority will get chance first.

..If two threads having same priority then we cant expect exact execution order, it depends on thread scheduler.


Thread class defines the following methods to get and set priority of a thread:-
-------------------------------------------------------------------------------- 

public final int getPriority();

public final void setPriority(int p);

note:- Allowed values Range: 1 to 10;

otherwise RE: IllegalArgumentException

example:
--------

t.setPriority(7);

t.setPriority(17);---- RE: IllegalArgumentException


Default Priority:
=================

The Default priority only for the main thread is 5.

but for all remaining threads default priority will be inherited, from parent to child.

i.e,whatever priority parent thread has, the same priority will be there for the child thread.

example:
--------

class MyThread extends Thread{


}
class Test {

p s v m(String args[]){

System.out.println(Thread.currentThread().getPriority());
//Thread.currentThread().setPriority(17);RE: IllegalArgumentException

Thread.currentThread().setPriority(7)--1;

MyThread t = new MyThread();

System.out.println(t.getPriority);

}

}

if we comment line 1 then child priority will become 5;
EXAMPLE2:
--------

class MyThread extends Thread{

public void run(){

for(in i=0;i<10;i++){

sop("child thread");

}

}

}
class Test {

p s v m(String args[]){

//System.out.println(Thread.currentThread().getPriority());
//Thread.currentThread().setPriority(17);RE: IllegalArgumentException

//Thread.currentThread().setPriority(7)--1;

MyThread t = new MyThread();

t.setPriority(10);--- 1

t.start();

for(in i=0;i<10;i++){

sop("main thread");

}


}

}

If we are commenting line 1 then both main and child threads have the same priority 5 and hence we cant expect execution order and exact out put.

if we not commenting line one then main thread has priority 5 and child thread has  priority 10,
hence child thread will get the chance first followed by main thread.

In this case output is child----10 times followed by main thread -- 10 times.

Note:
-----

some platforms wont provide proper support for thread priorities..
 